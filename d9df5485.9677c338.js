(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{228:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var i=n(2),a=n(11),r=(n(0),n(243)),o={title:"Adding a language feature"},l={id:"contributing/adding-a-language-feature",isDocsHomePage:!1,title:"Adding a language feature",description:"There are a number of [language features that we'd like to",source:"@site/docs/contributing/adding-a-language-feature.md",permalink:"/docs/contributing/adding-a-language-feature",sidebar:"Contributing",previous:{title:"Adding a built-in function",permalink:"/docs/contributing/adding-a-function"},next:{title:"Adding a refactoring",permalink:"/docs/contributing/adding-a-refactoring"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Backend",id:"backend",children:[{value:"Execution",id:"execution",children:[]},{value:"Serialization",id:"serialization",children:[]}]},{value:"Editor support",id:"editor-support",children:[{value:"Fluid Editor",id:"fluid-editor",children:[]},{value:"AST transformations",id:"ast-transformations",children:[]}]},{value:"Client/backend communication",id:"clientbackend-communication",children:[]}],d={rightToc:s};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There are a number of ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/darklang/dark/issues?q=is%3Aissue+is%3Aopen+label%3Alanguage-feature"}),"language features that we'd like to\nadd"),"\nto Dark. While there a quite a few steps involved in adding a language feature,\nthey're typically relatively straightforward to add once you've figured out the\nDark codebase."),Object(r.b)("p",null,"It's important to note that the most important part of a language\nfeature is getting agreement on what it does. We typically write specs\nfor features, and ensure that we have resolved how edge cases should\nwork, as well as ensuring it meshes with the rest of the language and\nlanguage definition. If you're interested in creating a language\nfeature, you should engage with Paul Biggar early and often."),Object(r.b)("h3",{id:"overview"},"Overview"),Object(r.b)("p",null,"Most language features will need to be added to our language definition. The language definition is ",Object(r.b)("inlineCode",{parentName:"p"},"FluidExpression.t"),', which is a Dark expression (which in turn contains other Dark expressions). This is commonly known as an "Abstract Syntax Tree" (or AST).'),Object(r.b)("p",null,"At time of writing, the definition of ",Object(r.b)("inlineCode",{parentName:"p"},"FluidExpression.t")," was"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),'type t =\n  | EInteger of id * string\n  | EBool of id * bool\n  | EString of id * string\n  | EFloat of id * string * string\n  | ENull of id\n  | EBlank of id\n  | ELet of id * string * t * t\n  | EIf of id * t * t * t\n  | EBinOp of id * string * t * t * sendToRail\n  | ELambda of id * string list * t\n  | EFieldAccess of id * t * string\n  | EVariable of id * string\n  | EFnCall of id * string * t list * sendToRail\n  (* An EPartial holds the intermediate state of user-input when changing from\n   * one expression to another. The [string] is the exact text that has been\n   * entered and the [t] is the old expression that is being changed. *)\n\n  | EPartial of id * string * t\n  (* An ERightPartial is used while in the process of adding an EBinOp,\n   * allowing for typing multiple characters as operators (eg, "++") after an\n   * expression. The [string] holds the typed characters while the [t] holds\n   * the LHS of the binop. *)\n  | ERightPartial of id * string * t\n  | EList of id * t list\n  | ERecord of id * (string * t) list\n  | EPipe of id * t list\n  | EConstructor of id * string * t list\n  | EMatch of id * t * (FluidPattern.t * t) list\n  (* Placeholder that indicates the target of the Thread. May be movable at\n   * some point *)\n  | EPipeTarget of id\n  (* EFeatureFlag: id, flagName, condExpr, caseAExpr, caseBExpr *)\n  | EFeatureFlag of id * string * t * t * t\n')),Object(r.b)("p",null,"This definition is shared between client and backend."),Object(r.b)("p",null,"The backend does the work of executing the expressions, and saving\nprograms. The execution engine is also compiled to Javascript in order\nto be available in the client."),Object(r.b)("p",null,'The client is responsible for editing programs. Typically, adding a\nlanguage feature means adding support for it to the many\ntransformations that the client does, including refactorings,\nrenamings, etc. It will also need support in the "Fluid" editor, which\nis where users actually type code.'),Object(r.b)("h2",{id:"backend"},"Backend"),Object(r.b)("h3",{id:"execution"},"Execution"),Object(r.b)("p",null,"The execution of the language is defined in ",Object(r.b)("inlineCode",{parentName:"p"},"backend/libexecution/ast.ml:exec"),". ",Object(r.b)("inlineCode",{parentName:"p"},"exec")," does the work of converting an expressions into a ",Object(r.b)("inlineCode",{parentName:"p"},"dval")," -- a Dark value."),Object(r.b)("p",null,"For example, ",Object(r.b)("inlineCode",{parentName:"p"},"DInt")," is the run-time value of an integer, which ",Object(r.b)("inlineCode",{parentName:"p"},"EInteger")," is the expression that represents an integer. ",Object(r.b)("inlineCode",{parentName:"p"},"exec")," converts from an ",Object(r.b)("inlineCode",{parentName:"p"},"EInteger")," that the programmer added to their program, into a ",Object(r.b)("inlineCode",{parentName:"p"},"DInt")," that can be operated on (added, subtracted, etc)."),Object(r.b)("p",null,"As another example, an ",Object(r.b)("inlineCode",{parentName:"p"},"ELet")," is a ",Object(r.b)("inlineCode",{parentName:"p"},"let")," statement in Dark. When you see"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"let x = 6\nx + 4\n")),Object(r.b)("p",null,"you have an ",Object(r.b)("inlineCode",{parentName:"p"},'ELet ("x", EInteger 6, EBinOp ("+", EVariable "x", EInteger 4))'),".\nWhen we execute this ",Object(r.b)("inlineCode",{parentName:"p"},"ELet"),", we first execute the ",Object(r.b)("inlineCode",{parentName:"p"},"6"),", creating a ",Object(r.b)("inlineCode",{parentName:"p"},"dval")," of\n",Object(r.b)("inlineCode",{parentName:"p"},"DInt 6"),", which we then store as ",Object(r.b)("inlineCode",{parentName:"p"},"x"),' in a "symbol table". We then execute ',Object(r.b)("inlineCode",{parentName:"p"},"x + 4"),"\nusing the symbol table with our known value of ",Object(r.b)("inlineCode",{parentName:"p"},"x = 6"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"dval"),"s are defined in ",Object(r.b)("inlineCode",{parentName:"p"},"backend/libexecution/types.ml")," and expressions\nare defined in ",Object(r.b)("inlineCode",{parentName:"p"},"libshared/fluid_expression.ml"),"."),Object(r.b)("h3",{id:"serialization"},"Serialization"),Object(r.b)("p",null,"The other main purpose of the backend is to save programs. Dark uses a fast binary serialization format, derived directly from expressions. This means you do not have to do anything special to allow users to save your new expression."),Object(r.b)("h4",{id:"expr"},"expr"),Object(r.b)("p",null,"Well, not exactly. We currently actually serialize an old format, called ",Object(r.b)("inlineCode",{parentName:"p"},"expr"),". We convert between ",Object(r.b)("inlineCode",{parentName:"p"},"expr")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FluidExpression.t")," in order to save and execute. The client only uses ",Object(r.b)("inlineCode",{parentName:"p"},"FluidExpression.t"),", however."),Object(r.b)("h4",{id:"expressions-are-add-only"},"Expressions are add-only"),Object(r.b)("p",null,"The automatic serialization has a caveat: the serializer has some rules\nto maintain compatibility with existing Dark programs. You can add new\nexpression types it, but you can't change existing ones. This means\nthat if you want to change a language feature to make it more powerful,\nyou need to instead add a new version of it, rather than editing the\ncurrent version."),Object(r.b)("p",null,"We do have the ability to remove old formats, but it is a little challenging to coordinate. Whenever we do this, it is always after the new replacement feature is live and stable, and then we go in and remove the old one."),Object(r.b)("p",null,"These rules apply to anything using the ",Object(r.b)("inlineCode",{parentName:"p"},"bin_io")," derivers, which currently includes both ",Object(r.b)("inlineCode",{parentName:"p"},"expr"),"s and ",Object(r.b)("inlineCode",{parentName:"p"},"tipe"),"s."),Object(r.b)("h2",{id:"editor-support"},"Editor support"),Object(r.b)("p",null,"The editor is where the developer actually creates code."),Object(r.b)("h3",{id:"fluid-editor"},"Fluid Editor"),Object(r.b)("p",null,'The "fluid" editor is the subpart of the client where users type code.\nIt handles keypresses and the AST transformations that they cause.'),Object(r.b)("p",null,"For example: if you have the code (with the cursor denoted as ",Object(r.b)("inlineCode",{parentName:"p"},"|"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"let x = |6\nx + 4\n")),Object(r.b)("p",null,"Pressing ",Object(r.b)("inlineCode",{parentName:"p"},"1")," with your cursor here makes the editor look up the current\nexpression, and add a ",Object(r.b)("inlineCode",{parentName:"p"},"1")," to the front of it. Here that converts ",Object(r.b)("inlineCode",{parentName:"p"},"6"),"\ninto ",Object(r.b)("inlineCode",{parentName:"p"},"16"),"."),Object(r.b)("h4",{id:"adding-tokens"},"Adding tokens"),Object(r.b)("p",null,'The FluidEditor works as a sort of "reverse parser". Instead of reading text and figuring out meaning, it instead takes the AST and pretty-prints it into a set of ',Object(r.b)("inlineCode",{parentName:"p"},"FluidToken"),"s. These tokens are stringified, showing the user textual code."),Object(r.b)("p",null,"The tokens also tied the current edit back to an expression. In the example above, the cursor is at the start of a ",Object(r.b)("inlineCode",{parentName:"p"},"TInteger")," token, which ties the current position back to the ",Object(r.b)("inlineCode",{parentName:"p"},"EInteger")," expression that defines it."),Object(r.b)("p",null,"To add a language feature, you will often need to add new tokens. You\nwill occasionally reuse some tokens, but most features use dedicated\ntokens so that there's no ambiguity."),Object(r.b)("p",null,"You add tokens in ",Object(r.b)("inlineCode",{parentName:"p"},"client/src/core/Types.ml")," and keystrokes are handled\nin ",Object(r.b)("inlineCode",{parentName:"p"},"client/src/fluid/Fluid.ml:updateKey"),"."),Object(r.b)("h3",{id:"ast-transformations"},"AST transformations"),Object(r.b)("p",null,"Once you have added the expression and the tokens, you will need to\nsupport existing features. Mostly, this means that existing AST\ntransformations and refactorings should continue to work. These are\ntypically either explicit (via the command palette) or implicit (by\nrenaming a variable)."),Object(r.b)("p",null,"You will be able to find almost everywhere that this is needed when you\nadd the definition to ",Object(r.b)("inlineCode",{parentName:"p"},"FluidExpression.t"),". The OCaml compiler will warn\nyou at every place that you have not handled it."),Object(r.b)("h2",{id:"clientbackend-communication"},"Client/backend communication"),Object(r.b)("p",null,"The client sends ASTs to the backend to save and to run the programs in\nthe cloud. The client also fetches expressions from the backend to\ndisplay and edit them. It does this over JSON."),Object(r.b)("p",null,"The backend has automatic JSON serializers and deserializers, using the\n",Object(r.b)("inlineCode",{parentName:"p"},"yojson")," derivers. The client has hand-written serializers in\n",Object(r.b)("inlineCode",{parentName:"p"},"client/src/core/Encoders.ml")," and ",Object(r.b)("inlineCode",{parentName:"p"},"client/src/core/Decoders.ml"),". The\nOCaml compiler will prompt you to add new encoders, but not decoders.\nWriting new ones is straightforward by following other examples there."))}c.isMDXComponent=!0},243:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),c=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),b=i,h=p["".concat(o,".").concat(b)]||p[b]||u[b]||r;return n?a.a.createElement(h,l(l({ref:t},d),{},{components:n})):a.a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);